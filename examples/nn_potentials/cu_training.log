potentials.py:52 INFO:
-------------------------------------------------------------------------------
                _______        _______ _     _ _______ _______
                |  |  | |      |       |_____| |______ |  |  |
                |  |  | |_____ |_____  |     | |______ |  |  |



MLChem is Machine Learning for Chemistry. This package is written in Python 3,
and intends to offer modern and rich features to perform machine learning
workflows for chemical physics.

This software is developed by Muammar El Khatib.
-------------------------------------------------------------------------------

potentials.py:53 INFO:Available backends: ['torch', 'torchvision', 'numpy'].
handler.py:34 WARNING:Data structure is not compatible with MLChem
handler.py:56 INFO:Preparing images...
handler.py:87 INFO:Images hashed and processed...
gaussian.py:111 INFO:Fingerprinting
gaussian.py:112 INFO:==============
gaussian.py:119 INFO:Getting unique element symbols for training
gaussian.py:126 INFO:Unique chemical elements: ['Cu']
gaussian.py:461 WARNING:Making default symmetry functions
gaussian.py:529 INFO:Number of features per chemical element:
gaussian.py:531 INFO:    - Cu: 8.
gaussian.py:533 INFO:Symmetry function parameters:
gaussian.py:534 INFO:-----------------------------
gaussian.py:536 INFO:  #      Symbol    Type Parameters
gaussian.py:557 INFO:  0   Cu            G2  eta: 0.0500
gaussian.py:557 INFO:  1   Cu            G2  eta: 0.2321
gaussian.py:557 INFO:  2   Cu            G2  eta: 1.0772
gaussian.py:557 INFO:  3   Cu            G2  eta: 5.0000
gaussian.py:557 INFO:  4   ['Cu', 'Cu']  G3  eta: 0.0050 gamma:  1.0000 zeta: 1.0000
gaussian.py:557 INFO:  5   ['Cu', 'Cu']  G3  eta: 0.0050 gamma: -1.0000 zeta: 1.0000
gaussian.py:557 INFO:  6   ['Cu', 'Cu']  G3  eta: 0.0050 gamma:  1.0000 zeta: 4.0000
gaussian.py:557 INFO:  7   ['Cu', 'Cu']  G3  eta: 0.0050 gamma: -1.0000 zeta: 4.0000
gaussian.py:174 INFO:Preprocessing data...
gaussian.py:217 INFO:Fingerprinting finished in 0 hours 0 minutes 8.28 seconds.
neuralnetwork.py:59 INFO:Model Training
neuralnetwork.py:60 INFO:==============
neuralnetwork.py:61 INFO:Model name: PytorchPotentials.
neuralnetwork.py:62 INFO:Number of hidden-layers: 2
neuralnetwork.py:65 INFO:Structure of Neural Net: (input, 10, 10, output)
neuralnetwork.py:129 INFO:ModuleDict(
  (Cu): Sequential(
    (0): Linear(in_features=8, out_features=10, bias=True)
    (1): ReLU()
    (2): Linear(in_features=10, out_features=10, bias=True)
    (3): ReLU()
    (4): Linear(in_features=10, out_features=1, bias=True)
  )
)
neuralnetwork.py:132 WARNING:Initialization of weights with Xavier Uniform by default.
neuralnetwork.py:237 INFO:Batch size: 10 elements per batch.
handler.py:56 INFO:Optimizer
handler.py:57 INFO:---------
handler.py:58 INFO:Name: Adam.
handler.py:59 INFO:Arguments:
handler.py:61 INFO:    - lr: 0.01.
handler.py:61 INFO:    - weight_decay: 0.0.
handler.py:63 INFO: 
neuralnetwork.py:268 INFO: 
neuralnetwork.py:269 INFO:Starting training...
neuralnetwork.py:270 INFO: 
neuralnetwork.py:277 INFO:Epoch  Time Stamp          Loss         RMSE/img RMSE/atom
neuralnetwork.py:283 INFO:------ ------------------- ------------ -------- ---------
neuralnetwork.py:335 INFO:     1 2019-04-10 09:36:15 4.979023e-03 0.126225 0.031556
neuralnetwork.py:335 INFO:     2 2019-04-10 09:36:15 1.359874e-03 0.065967 0.016492
neuralnetwork.py:335 INFO:     3 2019-04-10 09:36:15 1.600665e-03 0.071569 0.017892
neuralnetwork.py:335 INFO:     4 2019-04-10 09:36:15 2.414423e-03 0.087899 0.021975
neuralnetwork.py:335 INFO:     5 2019-04-10 09:36:15 2.550762e-03 0.090346 0.022587
neuralnetwork.py:335 INFO:     6 2019-04-10 09:36:15 2.035687e-03 0.080711 0.020178
neuralnetwork.py:335 INFO:     7 2019-04-10 09:36:15 1.238946e-03 0.062965 0.015741
neuralnetwork.py:335 INFO:     8 2019-04-10 09:36:15 5.350367e-04 0.041378 0.010344
neuralnetwork.py:335 INFO:     9 2019-04-10 09:36:16 2.097277e-04 0.025906 0.006477
neuralnetwork.py:335 INFO:    10 2019-04-10 09:36:16 3.404280e-04 0.033006 0.008251
neuralnetwork.py:335 INFO:    11 2019-04-10 09:36:16 6.453252e-04 0.045443 0.011361
neuralnetwork.py:335 INFO:    12 2019-04-10 09:36:16 6.956203e-04 0.047180 0.011795
neuralnetwork.py:335 INFO:    13 2019-04-10 09:36:16 4.545951e-04 0.038141 0.009535
neuralnetwork.py:335 INFO:    14 2019-04-10 09:36:16 2.189096e-04 0.026467 0.006617
neuralnetwork.py:335 INFO:    15 2019-04-10 09:36:16 1.963560e-04 0.025067 0.006267
neuralnetwork.py:335 INFO:    16 2019-04-10 09:36:16 3.270200e-04 0.032349 0.008087
neuralnetwork.py:335 INFO:    17 2019-04-10 09:36:16 4.269482e-04 0.036963 0.009241
neuralnetwork.py:335 INFO:    18 2019-04-10 09:36:16 3.951406e-04 0.035559 0.008890
neuralnetwork.py:335 INFO:    19 2019-04-10 09:36:16 2.606201e-04 0.028879 0.007220
neuralnetwork.py:335 INFO:    20 2019-04-10 09:36:16 1.163280e-04 0.019294 0.004823
neuralnetwork.py:335 INFO:    21 2019-04-10 09:36:17 4.166118e-05 0.011546 0.002887
neuralnetwork.py:335 INFO:    22 2019-04-10 09:36:17 6.212095e-05 0.014099 0.003525
neuralnetwork.py:335 INFO:    23 2019-04-10 09:36:17 1.445089e-04 0.021504 0.005376
neuralnetwork.py:335 INFO:    24 2019-04-10 09:36:17 2.242561e-04 0.026788 0.006697
neuralnetwork.py:335 INFO:    25 2019-04-10 09:36:17 2.488605e-04 0.028220 0.007055
neuralnetwork.py:335 INFO:    26 2019-04-10 09:36:17 2.072575e-04 0.025753 0.006438
neuralnetwork.py:335 INFO:    27 2019-04-10 09:36:17 1.290184e-04 0.020319 0.005080
neuralnetwork.py:335 INFO:    28 2019-04-10 09:36:17 5.920596e-05 0.013764 0.003441
neuralnetwork.py:335 INFO:    29 2019-04-10 09:36:17 2.969402e-05 0.009748 0.002437
neuralnetwork.py:335 INFO:    30 2019-04-10 09:36:17 4.289196e-05 0.011716 0.002929
neuralnetwork.py:335 INFO:    31 2019-04-10 09:36:17 7.515724e-05 0.015508 0.003877
neuralnetwork.py:335 INFO:    32 2019-04-10 09:36:18 9.525451e-05 0.017459 0.004365
neuralnetwork.py:335 INFO:    33 2019-04-10 09:36:18 8.697923e-05 0.016683 0.004171
neuralnetwork.py:335 INFO:    34 2019-04-10 09:36:18 5.861406e-05 0.013695 0.003424
neuralnetwork.py:335 INFO:    35 2019-04-10 09:36:18 3.352854e-05 0.010358 0.002590
neuralnetwork.py:335 INFO:    36 2019-04-10 09:36:18 2.897139e-05 0.009629 0.002407
neuralnetwork.py:335 INFO:    37 2019-04-10 09:36:18 4.181471e-05 0.011568 0.002892
neuralnetwork.py:335 INFO:    38 2019-04-10 09:36:18 5.411683e-05 0.013160 0.003290
neuralnetwork.py:335 INFO:    39 2019-04-10 09:36:18 5.119578e-05 0.012799 0.003200
neuralnetwork.py:335 INFO:    40 2019-04-10 09:36:18 3.426694e-05 0.010472 0.002618
neuralnetwork.py:335 INFO:    41 2019-04-10 09:36:18 1.650465e-05 0.007267 0.001817
neuralnetwork.py:335 INFO:    42 2019-04-10 09:36:18 9.831291e-06 0.005609 0.001402
neuralnetwork.py:335 INFO:    43 2019-04-10 09:36:18 1.626350e-05 0.007214 0.001804
neuralnetwork.py:335 INFO:    44 2019-04-10 09:36:19 2.817604e-05 0.009495 0.002374
neuralnetwork.py:335 INFO:    45 2019-04-10 09:36:19 3.551832e-05 0.010661 0.002665
neuralnetwork.py:335 INFO:    46 2019-04-10 09:36:19 3.305193e-05 0.010284 0.002571
neuralnetwork.py:335 INFO:    47 2019-04-10 09:36:19 2.286838e-05 0.008554 0.002139
neuralnetwork.py:335 INFO:    48 2019-04-10 09:36:19 1.212201e-05 0.006228 0.001557
neuralnetwork.py:335 INFO:    49 2019-04-10 09:36:19 7.411224e-06 0.004870 0.001217
neuralnetwork.py:347 INFO:Training finished in 0 hours 0 minutes 4.20 seconds.
