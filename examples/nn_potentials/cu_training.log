potentials.py:52 INFO:
-------------------------------------------------------------------------------
                _______        _______ _     _ _______ _______
                |  |  | |      |       |_____| |______ |  |  |
                |  |  | |_____ |_____  |     | |______ |  |  |



MLChem is Machine Learning for Chemistry. This package is written in Python 3,
and intends to offer modern and rich features to perform machine learning
workflows for chemical physics.

This software is developed by Muammar El Khatib.
-------------------------------------------------------------------------------

potentials.py:53 INFO:Available backends: ['torch', 'torchvision', 'numpy'].
handler.py:34 WARNING:Data structure is not compatible with MLChem
handler.py:56 INFO:Preparing images...
handler.py:87 INFO:Images hashed and processed...
gaussian.py:112 INFO:Fingerprinting
gaussian.py:113 INFO:==============
gaussian.py:120 INFO:Getting unique element symbols for training
gaussian.py:126 INFO:Unique elements: ['Cu']
gaussian.py:467 WARNING:Making default symmetry functions
gaussian.py:179 INFO:Preprocessing data...
gaussian.py:223 INFO:Fingerprinting finished in 0 hours 0 minutes 8.73 seconds.
neuralnetwork.py:59 INFO:Model Training
neuralnetwork.py:60 INFO:==============
neuralnetwork.py:61 INFO:Model name: PytorchPotentials.
neuralnetwork.py:62 INFO:Number of hidden-layers: 2
neuralnetwork.py:65 INFO:Structure of Neural Net: (input, 10, 10, output)
neuralnetwork.py:124 INFO:ModuleDict(
  (Cu): Sequential(
    (0): Linear(in_features=8, out_features=10, bias=True)
    (1): ReLU()
    (2): Linear(in_features=10, out_features=10, bias=True)
    (3): ReLU()
    (4): Linear(in_features=10, out_features=1, bias=True)
  )
)
neuralnetwork.py:127 WARNING:Initialization of weights with Xavier Uniform by default.
neuralnetwork.py:231 INFO:Batch size: 10 elements per batch.
handler.py:51 INFO:Optimizer
handler.py:52 INFO:---------
handler.py:53 INFO:Name: Adam.
handler.py:54 INFO:Arguments:
handler.py:56 INFO:    - lr: 0.01.
handler.py:56 INFO:    - weight_decay: 0.0.
handler.py:58 INFO: 
neuralnetwork.py:262 INFO: 
neuralnetwork.py:263 INFO:Starting training...
neuralnetwork.py:264 INFO: 
neuralnetwork.py:271 INFO:Epoch  Time Stamp          Loss         RMSE/img RMSE/atom
neuralnetwork.py:277 INFO:------ ------------------- ------------ -------- ---------
neuralnetwork.py:335 INFO:     1 2019-04-06 13:07:31 1.787652e-03 0.075634 0.018908
neuralnetwork.py:335 INFO:     2 2019-04-06 13:07:31 1.198253e-03 0.061923 0.015481
neuralnetwork.py:335 INFO:     3 2019-04-06 13:07:31 9.964290e-04 0.056467 0.014117
neuralnetwork.py:335 INFO:     4 2019-04-06 13:07:31 4.884327e-04 0.039535 0.009884
neuralnetwork.py:335 INFO:     5 2019-04-06 13:07:31 2.589084e-04 0.028784 0.007196
neuralnetwork.py:335 INFO:     6 2019-04-06 13:07:31 4.860135e-04 0.039437 0.009859
neuralnetwork.py:335 INFO:     7 2019-04-06 13:07:31 5.299195e-04 0.041179 0.010295
neuralnetwork.py:335 INFO:     8 2019-04-06 13:07:31 3.866072e-04 0.035173 0.008793
neuralnetwork.py:335 INFO:     9 2019-04-06 13:07:31 2.735297e-04 0.029585 0.007396
neuralnetwork.py:335 INFO:    10 2019-04-06 13:07:31 2.115806e-04 0.026020 0.006505
neuralnetwork.py:335 INFO:    11 2019-04-06 13:07:32 2.074888e-04 0.025768 0.006442
neuralnetwork.py:335 INFO:    12 2019-04-06 13:07:32 2.492986e-04 0.028245 0.007061
neuralnetwork.py:335 INFO:    13 2019-04-06 13:07:32 2.579764e-04 0.028732 0.007183
neuralnetwork.py:335 INFO:    14 2019-04-06 13:07:32 1.913676e-04 0.024746 0.006187
neuralnetwork.py:335 INFO:    15 2019-04-06 13:07:32 1.004567e-04 0.017929 0.004482
neuralnetwork.py:335 INFO:    16 2019-04-06 13:07:32 6.191127e-05 0.014075 0.003519
neuralnetwork.py:335 INFO:    17 2019-04-06 13:07:32 7.884009e-05 0.015884 0.003971
neuralnetwork.py:335 INFO:    18 2019-04-06 13:07:32 8.756169e-05 0.016739 0.004185
neuralnetwork.py:335 INFO:    19 2019-04-06 13:07:32 7.822431e-05 0.015821 0.003955
neuralnetwork.py:335 INFO:    20 2019-04-06 13:07:32 6.483961e-05 0.014404 0.003601
neuralnetwork.py:335 INFO:    21 2019-04-06 13:07:32 3.830603e-05 0.011072 0.002768
neuralnetwork.py:335 INFO:    22 2019-04-06 13:07:32 2.157166e-05 0.008308 0.002077
neuralnetwork.py:335 INFO:    23 2019-04-06 13:07:32 3.874643e-05 0.011135 0.002784
neuralnetwork.py:335 INFO:    24 2019-04-06 13:07:32 4.960899e-05 0.012600 0.003150
neuralnetwork.py:335 INFO:    25 2019-04-06 13:07:32 3.154280e-05 0.010047 0.002512
neuralnetwork.py:335 INFO:    26 2019-04-06 13:07:32 1.513977e-05 0.006960 0.001740
neuralnetwork.py:335 INFO:    27 2019-04-06 13:07:32 1.456740e-05 0.006828 0.001707
neuralnetwork.py:335 INFO:    28 2019-04-06 13:07:32 1.670037e-05 0.007310 0.001828
neuralnetwork.py:335 INFO:    29 2019-04-06 13:07:32 1.690435e-05 0.007355 0.001839
neuralnetwork.py:335 INFO:    30 2019-04-06 13:07:32 1.835390e-05 0.007664 0.001916
neuralnetwork.py:335 INFO:    31 2019-04-06 13:07:32 1.405962e-05 0.006708 0.001677
neuralnetwork.py:335 INFO:    32 2019-04-06 13:07:33 6.472572e-06 0.004551 0.001138
neuralnetwork.py:347 INFO:Training finished in 0 hours 0 minutes 1.52 seconds.
neuralnetwork.py:348 INFO:outputs
neuralnetwork.py:349 INFO:[tensor([-14.5797796249, -14.5654411316, -14.5302391052, -14.4876880646,
        -14.4416170120, -14.4016361237, -14.3696155548, -14.3598594666,
        -14.3687734604, -14.3836746216], requires_grad=True)]
neuralnetwork.py:350 INFO:targets
neuralnetwork.py:351 INFO:tensor([[-14.5868730545, -14.5640010834, -14.5292606354, -14.4874134064,
         -14.4443883896, -14.4063940048, -14.3788156509, -14.3651800156,
         -14.3665180206, -14.3813629150]])
