potentials.py:52 INFO:
-------------------------------------------------------------------------------
                _______        _______ _     _ _______ _______
                |  |  | |      |       |_____| |______ |  |  |
                |  |  | |_____ |_____  |     | |______ |  |  |



MLChem is Machine Learning for Chemistry. This package is written in Python 3,
and intends to offer modern and rich features to perform machine learning
workflows for chemical physics.

This software is developed by Muammar El Khatib.
-------------------------------------------------------------------------------

potentials.py:53 INFO:Available backends: ['torch', 'torchvision', 'numpy'].
handler.py:34 WARNING:Data structure is not compatible with MLChem
handler.py:56 INFO:Preparing images...
handler.py:87 INFO:Images hashed and processed...
gaussian.py:107 INFO: 
gaussian.py:108 INFO:Fingerprinting
gaussian.py:109 INFO:==============
gaussian.py:116 INFO:Getting unique element symbols for training
gaussian.py:123 INFO:Unique chemical elements: ['Cu']
gaussian.py:513 WARNING:Making default symmetry functions
gaussian.py:581 INFO:Number of features per chemical element:
gaussian.py:583 INFO:    - Cu: 8.
gaussian.py:585 INFO: 
gaussian.py:586 INFO:Symmetry function parameters:
gaussian.py:587 INFO:-----------------------------
gaussian.py:589 INFO:  #      Symbol    Type Parameters
gaussian.py:610 INFO:  0   Cu            G2  eta: 0.0500
gaussian.py:610 INFO:  1   Cu            G2  eta: 0.2321
gaussian.py:610 INFO:  2   Cu            G2  eta: 1.0772
gaussian.py:610 INFO:  3   Cu            G2  eta: 5.0000
gaussian.py:610 INFO:  4   Cu, Cu        G3  eta: 0.0050 gamma:  1.0000 zeta: 1.0000
gaussian.py:610 INFO:  5   Cu, Cu        G3  eta: 0.0050 gamma: -1.0000 zeta: 1.0000
gaussian.py:610 INFO:  6   Cu, Cu        G3  eta: 0.0050 gamma:  1.0000 zeta: 4.0000
gaussian.py:610 INFO:  7   Cu, Cu        G3  eta: 0.0050 gamma: -1.0000 zeta: 4.0000
gaussian.py:136 INFO:
gaussian.py:137 INFO:Adding atomic fingerprint calculations to scheduler...
gaussian.py:164 INFO:... finished in 0 hours 0 minutes 1.94 seconds.
gaussian.py:260 INFO:Fingerprinting finished in 0 hours 0 minutes 12.09 seconds.
neuralnetwork.py:59 INFO: 
neuralnetwork.py:60 INFO:Model Training
neuralnetwork.py:61 INFO:==============
neuralnetwork.py:62 INFO:Model name: PytorchPotentials.
neuralnetwork.py:63 INFO:Number of hidden-layers: 2
neuralnetwork.py:66 INFO:Structure of Neural Net: (input, 10, 10, output)
neuralnetwork.py:67 INFO: 
neuralnetwork.py:131 INFO:ModuleDict(
  (Cu): Sequential(
    (0): Linear(in_features=8, out_features=10, bias=True)
    (1): ReLU()
    (2): Linear(in_features=10, out_features=10, bias=True)
    (3): ReLU()
    (4): Linear(in_features=10, out_features=1, bias=True)
  )
)
neuralnetwork.py:134 WARNING:Initialization of weights with Xavier Uniform by default.
neuralnetwork.py:244 INFO: 
neuralnetwork.py:245 INFO:Batch Information
neuralnetwork.py:246 INFO:-----------------
neuralnetwork.py:247 INFO:Number of batches: 1.
neuralnetwork.py:248 INFO:Batch size: 10 elements per batch.
neuralnetwork.py:249 INFO: 
handler.py:94 INFO:Optimizer
handler.py:95 INFO:---------
handler.py:96 INFO:Name: Adam.
handler.py:97 INFO:Options:
handler.py:99 INFO:    - lr: 0.01.
handler.py:99 INFO:    - weight_decay: 0.0.
handler.py:101 INFO: 
neuralnetwork.py:283 INFO: 
neuralnetwork.py:284 INFO:Starting training...
neuralnetwork.py:285 INFO: 
neuralnetwork.py:292 INFO:Epoch  Time Stamp          Loss         RMSE/img RMSE/atom
neuralnetwork.py:298 INFO:------ ------------------- ------------ -------- ---------
neuralnetwork.py:354 INFO:     1 2019-04-20 19:36:20 2.657067e-03 0.092210 0.023052
neuralnetwork.py:354 INFO:     2 2019-04-20 19:36:20 2.907580e-03 0.096459 0.024115
neuralnetwork.py:354 INFO:     3 2019-04-20 19:36:21 2.243889e-03 0.084738 0.021184
neuralnetwork.py:354 INFO:     4 2019-04-20 19:36:21 1.963203e-03 0.079261 0.019815
neuralnetwork.py:354 INFO:     5 2019-04-20 19:36:21 2.058948e-03 0.081170 0.020293
neuralnetwork.py:354 INFO:     6 2019-04-20 19:36:21 2.057867e-03 0.081149 0.020287
neuralnetwork.py:354 INFO:     7 2019-04-20 19:36:21 1.836273e-03 0.076656 0.019164
neuralnetwork.py:354 INFO:     8 2019-04-20 19:36:21 1.548339e-03 0.070390 0.017597
neuralnetwork.py:354 INFO:     9 2019-04-20 19:36:21 1.280320e-03 0.064008 0.016002
neuralnetwork.py:354 INFO:    10 2019-04-20 19:36:21 1.014784e-03 0.056985 0.014246
neuralnetwork.py:354 INFO:    11 2019-04-20 19:36:22 7.060820e-04 0.047534 0.011883
neuralnetwork.py:354 INFO:    12 2019-04-20 19:36:22 3.659046e-04 0.034218 0.008555
neuralnetwork.py:354 INFO:    13 2019-04-20 19:36:22 1.080899e-04 0.018598 0.004650
neuralnetwork.py:354 INFO:    14 2019-04-20 19:36:22 9.309671e-05 0.017260 0.004315
neuralnetwork.py:354 INFO:    15 2019-04-20 19:36:22 3.426958e-04 0.033115 0.008279
neuralnetwork.py:354 INFO:    16 2019-04-20 19:36:22 5.502558e-04 0.041962 0.010491
neuralnetwork.py:354 INFO:    17 2019-04-20 19:36:22 4.795517e-04 0.039174 0.009793
neuralnetwork.py:354 INFO:    18 2019-04-20 19:36:22 2.458266e-04 0.028047 0.007012
neuralnetwork.py:354 INFO:    19 2019-04-20 19:36:22 6.215033e-05 0.014103 0.003526
neuralnetwork.py:354 INFO:    20 2019-04-20 19:36:22 2.538736e-05 0.009013 0.002253
neuralnetwork.py:354 INFO:    21 2019-04-20 19:36:23 8.406508e-05 0.016401 0.004100
neuralnetwork.py:354 INFO:    22 2019-04-20 19:36:23 1.461248e-04 0.021624 0.005406
neuralnetwork.py:354 INFO:    23 2019-04-20 19:36:23 1.745774e-04 0.023636 0.005909
neuralnetwork.py:354 INFO:    24 2019-04-20 19:36:23 1.844557e-04 0.024295 0.006074
neuralnetwork.py:354 INFO:    25 2019-04-20 19:36:23 1.888354e-04 0.024582 0.006145
neuralnetwork.py:354 INFO:    26 2019-04-20 19:36:23 1.724570e-04 0.023492 0.005873
neuralnetwork.py:354 INFO:    27 2019-04-20 19:36:23 1.212948e-04 0.019701 0.004925
neuralnetwork.py:354 INFO:    28 2019-04-20 19:36:23 5.401547e-05 0.013147 0.003287
neuralnetwork.py:354 INFO:    29 2019-04-20 19:36:23 1.362276e-05 0.006602 0.001651
neuralnetwork.py:354 INFO:    30 2019-04-20 19:36:24 2.307355e-05 0.008593 0.002148
neuralnetwork.py:354 INFO:    31 2019-04-20 19:36:24 5.282364e-05 0.013001 0.003250
neuralnetwork.py:354 INFO:    32 2019-04-20 19:36:24 6.348235e-05 0.014253 0.003563
neuralnetwork.py:354 INFO:    33 2019-04-20 19:36:24 6.275361e-05 0.014171 0.003543
neuralnetwork.py:354 INFO:    34 2019-04-20 19:36:24 6.893415e-05 0.014852 0.003713
neuralnetwork.py:354 INFO:    35 2019-04-20 19:36:24 6.507221e-05 0.014430 0.003608
neuralnetwork.py:354 INFO:    36 2019-04-20 19:36:24 3.669421e-05 0.010836 0.002709
neuralnetwork.py:354 INFO:    37 2019-04-20 19:36:24 8.625056e-06 0.005254 0.001313
neuralnetwork.py:354 INFO:    38 2019-04-20 19:36:24 8.723341e-06 0.005283 0.001321
neuralnetwork.py:354 INFO:    39 2019-04-20 19:36:24 2.545098e-05 0.009025 0.002256
neuralnetwork.py:354 INFO:    40 2019-04-20 19:36:24 3.279809e-05 0.010245 0.002561
neuralnetwork.py:354 INFO:    41 2019-04-20 19:36:24 2.944373e-05 0.009707 0.002427
neuralnetwork.py:354 INFO:    42 2019-04-20 19:36:25 2.911686e-05 0.009653 0.002413
neuralnetwork.py:354 INFO:    43 2019-04-20 19:36:25 3.209743e-05 0.010135 0.002534
neuralnetwork.py:354 INFO:    44 2019-04-20 19:36:25 2.651968e-05 0.009212 0.002303
neuralnetwork.py:354 INFO:    45 2019-04-20 19:36:25 1.242968e-05 0.006307 0.001577
neuralnetwork.py:354 INFO:    46 2019-04-20 19:36:25 4.711849e-06 0.003883 0.000971
neuralnetwork.py:366 INFO:Training finished in 0 hours 0 minutes 4.91 seconds.
