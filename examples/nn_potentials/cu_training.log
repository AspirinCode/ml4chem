potentials.py:52 INFO:
-------------------------------------------------------------------------------
                _______        _______ _     _ _______ _______
                |  |  | |      |       |_____| |______ |  |  |
                |  |  | |_____ |_____  |     | |______ |  |  |



MLChem is Machine Learning for Chemistry. This package is written in Python 3,
and intends to offer modern and rich features to perform machine learning
workflows for chemical physics.

This software is developed by Muammar El Khatib.
-------------------------------------------------------------------------------

potentials.py:53 INFO:Available backends: ['torch', 'torchvision', 'numpy'].
handler.py:34 WARNING:Data structure is not compatible with MLChem
handler.py:56 INFO:Preparing images...
handler.py:87 INFO:Images hashed and processed...
gaussian.py:111 INFO:Fingerprinting
gaussian.py:112 INFO:==============
gaussian.py:119 INFO:Getting unique element symbols for training
gaussian.py:126 INFO:Unique chemical elements: ['Cu']
gaussian.py:461 WARNING:Making default symmetry functions
gaussian.py:529 INFO:Number of features per chemical element:
gaussian.py:531 INFO:    - Cu: 8.
gaussian.py:533 INFO:Symmetry function parameters:
gaussian.py:534 INFO:-----------------------------
gaussian.py:536 INFO:  #      Symbol    Type Parameters
gaussian.py:557 INFO:  0   Cu            G2  eta: 0.0500
gaussian.py:557 INFO:  1   Cu            G2  eta: 0.2321
gaussian.py:557 INFO:  2   Cu            G2  eta: 1.0772
gaussian.py:557 INFO:  3   Cu            G2  eta: 5.0000
gaussian.py:557 INFO:  4   ['Cu', 'Cu']  G3  eta: 0.0050 gamma:  1.0000 zeta: 1.0000
gaussian.py:557 INFO:  5   ['Cu', 'Cu']  G3  eta: 0.0050 gamma: -1.0000 zeta: 1.0000
gaussian.py:557 INFO:  6   ['Cu', 'Cu']  G3  eta: 0.0050 gamma:  1.0000 zeta: 4.0000
gaussian.py:557 INFO:  7   ['Cu', 'Cu']  G3  eta: 0.0050 gamma: -1.0000 zeta: 4.0000
gaussian.py:174 INFO:Preprocessing data...
gaussian.py:217 INFO:Fingerprinting finished in 0 hours 0 minutes 9.37 seconds.
neuralnetwork.py:59 INFO:Model Training
neuralnetwork.py:60 INFO:==============
neuralnetwork.py:61 INFO:Model name: PytorchPotentials.
neuralnetwork.py:62 INFO:Number of hidden-layers: 2
neuralnetwork.py:65 INFO:Structure of Neural Net: (input, 10, 10, output)
neuralnetwork.py:129 INFO:ModuleDict(
  (Cu): Sequential(
    (0): Linear(in_features=8, out_features=10, bias=True)
    (1): ReLU()
    (2): Linear(in_features=10, out_features=10, bias=True)
    (3): ReLU()
    (4): Linear(in_features=10, out_features=1, bias=True)
  )
)
neuralnetwork.py:132 WARNING:Initialization of weights with Xavier Uniform by default.
neuralnetwork.py:242 INFO:Batch size: 10 elements per batch.
handler.py:56 INFO:Optimizer
handler.py:57 INFO:---------
handler.py:58 INFO:Name: Adam.
handler.py:59 INFO:Arguments:
handler.py:61 INFO:    - lr: 0.01.
handler.py:61 INFO:    - weight_decay: 0.0.
handler.py:63 INFO: 
neuralnetwork.py:276 INFO: 
neuralnetwork.py:277 INFO:Starting training...
neuralnetwork.py:278 INFO: 
neuralnetwork.py:285 INFO:Epoch  Time Stamp          Loss         RMSE/img RMSE/atom
neuralnetwork.py:291 INFO:------ ------------------- ------------ -------- ---------
neuralnetwork.py:347 INFO:     1 2019-04-11 16:46:10 2.719504e-03 0.093287 0.023322
neuralnetwork.py:347 INFO:     2 2019-04-11 16:46:10 1.567884e-03 0.070832 0.017708
neuralnetwork.py:347 INFO:     3 2019-04-11 16:46:10 1.571306e-03 0.070910 0.017727
neuralnetwork.py:347 INFO:     4 2019-04-11 16:46:10 1.237740e-03 0.062935 0.015734
neuralnetwork.py:347 INFO:     5 2019-04-11 16:46:10 5.920719e-04 0.043527 0.010882
neuralnetwork.py:347 INFO:     6 2019-04-11 16:46:10 2.370913e-04 0.027544 0.006886
neuralnetwork.py:347 INFO:     7 2019-04-11 16:46:10 4.198634e-04 0.036655 0.009164
neuralnetwork.py:347 INFO:     8 2019-04-11 16:46:10 4.247728e-04 0.036868 0.009217
neuralnetwork.py:347 INFO:     9 2019-04-11 16:46:10 1.797949e-04 0.023986 0.005997
neuralnetwork.py:347 INFO:    10 2019-04-11 16:46:10 2.116642e-04 0.026025 0.006506
neuralnetwork.py:347 INFO:    11 2019-04-11 16:46:10 4.387029e-04 0.037468 0.009367
neuralnetwork.py:347 INFO:    12 2019-04-11 16:46:10 4.397445e-04 0.037512 0.009378
neuralnetwork.py:347 INFO:    13 2019-04-11 16:46:10 2.521882e-04 0.028408 0.007102
neuralnetwork.py:347 INFO:    14 2019-04-11 16:46:11 1.404256e-04 0.021198 0.005300
neuralnetwork.py:347 INFO:    15 2019-04-11 16:46:11 1.813652e-04 0.024091 0.006023
neuralnetwork.py:347 INFO:    16 2019-04-11 16:46:11 2.051136e-04 0.025620 0.006405
neuralnetwork.py:347 INFO:    17 2019-04-11 16:46:11 1.266535e-04 0.020132 0.005033
neuralnetwork.py:347 INFO:    18 2019-04-11 16:46:11 5.659455e-05 0.013457 0.003364
neuralnetwork.py:347 INFO:    19 2019-04-11 16:46:11 8.000099e-05 0.016000 0.004000
neuralnetwork.py:347 INFO:    20 2019-04-11 16:46:11 1.441100e-04 0.021474 0.005369
neuralnetwork.py:347 INFO:    21 2019-04-11 16:46:11 1.637193e-04 0.022889 0.005722
neuralnetwork.py:347 INFO:    22 2019-04-11 16:46:11 1.283185e-04 0.020264 0.005066
neuralnetwork.py:347 INFO:    23 2019-04-11 16:46:11 9.106881e-05 0.017071 0.004268
neuralnetwork.py:347 INFO:    24 2019-04-11 16:46:11 9.010179e-05 0.016980 0.004245
neuralnetwork.py:347 INFO:    25 2019-04-11 16:46:11 1.018185e-04 0.018050 0.004513
neuralnetwork.py:347 INFO:    26 2019-04-11 16:46:11 8.479850e-05 0.016473 0.004118
neuralnetwork.py:347 INFO:    27 2019-04-11 16:46:12 4.595826e-05 0.012127 0.003032
neuralnetwork.py:347 INFO:    28 2019-04-11 16:46:12 2.661409e-05 0.009228 0.002307
neuralnetwork.py:347 INFO:    29 2019-04-11 16:46:12 3.958732e-05 0.011255 0.002814
neuralnetwork.py:347 INFO:    30 2019-04-11 16:46:12 5.577424e-05 0.013360 0.003340
neuralnetwork.py:347 INFO:    31 2019-04-11 16:46:12 5.083532e-05 0.012754 0.003189
neuralnetwork.py:347 INFO:    32 2019-04-11 16:46:12 3.809669e-05 0.011041 0.002760
neuralnetwork.py:347 INFO:    33 2019-04-11 16:46:12 3.980531e-05 0.011286 0.002822
neuralnetwork.py:347 INFO:    34 2019-04-11 16:46:12 4.903491e-05 0.012526 0.003132
neuralnetwork.py:347 INFO:    35 2019-04-11 16:46:12 4.372631e-05 0.011829 0.002957
neuralnetwork.py:347 INFO:    36 2019-04-11 16:46:12 2.623049e-05 0.009162 0.002290
neuralnetwork.py:347 INFO:    37 2019-04-11 16:46:12 1.715121e-05 0.007408 0.001852
neuralnetwork.py:347 INFO:    38 2019-04-11 16:46:12 2.099187e-05 0.008196 0.002049
neuralnetwork.py:347 INFO:    39 2019-04-11 16:46:12 2.392945e-05 0.008751 0.002188
neuralnetwork.py:347 INFO:    40 2019-04-11 16:46:13 1.939423e-05 0.007878 0.001969
neuralnetwork.py:347 INFO:    41 2019-04-11 16:46:13 1.610626e-05 0.007179 0.001795
neuralnetwork.py:347 INFO:    42 2019-04-11 16:46:13 2.033178e-05 0.008066 0.002017
neuralnetwork.py:347 INFO:    43 2019-04-11 16:46:13 2.408154e-05 0.008778 0.002195
neuralnetwork.py:347 INFO:    44 2019-04-11 16:46:13 1.975091e-05 0.007950 0.001988
neuralnetwork.py:347 INFO:    45 2019-04-11 16:46:13 1.291419e-05 0.006428 0.001607
neuralnetwork.py:347 INFO:    46 2019-04-11 16:46:13 1.152587e-05 0.006073 0.001518
neuralnetwork.py:347 INFO:    47 2019-04-11 16:46:13 1.291602e-05 0.006429 0.001607
neuralnetwork.py:347 INFO:    48 2019-04-11 16:46:13 1.127086e-05 0.006006 0.001501
neuralnetwork.py:347 INFO:    49 2019-04-11 16:46:13 8.542770e-06 0.005228 0.001307
neuralnetwork.py:347 INFO:    50 2019-04-11 16:46:13 9.654446e-06 0.005558 0.001390
neuralnetwork.py:347 INFO:    51 2019-04-11 16:46:13 1.251990e-05 0.006330 0.001582
neuralnetwork.py:347 INFO:    52 2019-04-11 16:46:13 1.193275e-05 0.006179 0.001545
neuralnetwork.py:347 INFO:    53 2019-04-11 16:46:13 9.028785e-06 0.005375 0.001344
neuralnetwork.py:347 INFO:    54 2019-04-11 16:46:14 8.039776e-06 0.005072 0.001268
neuralnetwork.py:347 INFO:    55 2019-04-11 16:46:14 8.390951e-06 0.005182 0.001295
neuralnetwork.py:347 INFO:    56 2019-04-11 16:46:14 7.408341e-06 0.004869 0.001217
neuralnetwork.py:359 INFO:Training finished in 0 hours 0 minutes 4.29 seconds.
