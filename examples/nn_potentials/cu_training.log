potentials.py:52 INFO:
-------------------------------------------------------------------------------
                _______        _______ _     _ _______ _______
                |  |  | |      |       |_____| |______ |  |  |
                |  |  | |_____ |_____  |     | |______ |  |  |



MLChem is Machine Learning for Chemistry. This package is written in Python 3,
and intends to offer modern and rich features to perform machine learning
workflows for chemical physics.

This software is developed by Muammar El Khatib.
-------------------------------------------------------------------------------

potentials.py:53 INFO:Available backends: ['torch', 'torchvision', 'numpy'].
handler.py:34 WARNING:Data structure is not compatible with MLChem
handler.py:56 INFO:Preparing images...
handler.py:87 INFO:Images hashed and processed...
gaussian.py:112 INFO:Fingerprinting
gaussian.py:119 INFO:Getting unique element symbols for training
gaussian.py:125 INFO:Unique elements: ['Cu']
gaussian.py:466 WARNING:Making default symmetry functions
gaussian.py:178 INFO:Preprocessing data...
gaussian.py:222 INFO:Fingerprinting finished in 0 hours 0 minutes 8.03 seconds.
neuralnetwork.py:60 INFO:Model Training
neuralnetwork.py:61 INFO:==============
neuralnetwork.py:62 INFO:Model name: PytorchPotentials.
neuralnetwork.py:63 INFO:Number of hidden-layers: 2
neuralnetwork.py:66 INFO:Structure of Neural Net: (input, 10, 10, output)
neuralnetwork.py:125 INFO:ModuleDict(
  (Cu): Sequential(
    (0): Linear(in_features=8, out_features=10, bias=True)
    (1): ReLU()
    (2): Linear(in_features=10, out_features=10, bias=True)
    (3): ReLU()
    (4): Linear(in_features=10, out_features=1, bias=True)
  )
)
neuralnetwork.py:128 WARNING:Initialization of weights with Xavier Uniform by default.
neuralnetwork.py:229 INFO:Batch size: 10 elements per batch.
neuralnetwork.py:264 INFO:Epoch  Time Stamp          Loss         RMSE/img RMSE/atom
neuralnetwork.py:270 INFO:------ ------------------- ------------ -------- ---------
neuralnetwork.py:326 INFO:     1 2019-04-05 14:22:47 8.060438e-03 0.077413 0.019353
neuralnetwork.py:326 INFO:     2 2019-04-05 14:22:47 1.872746e-03 0.077209 0.019302
neuralnetwork.py:326 INFO:     3 2019-04-05 14:22:47 1.862898e-03 0.075832 0.018958
neuralnetwork.py:326 INFO:     4 2019-04-05 14:22:47 1.797030e-03 0.073240 0.018310
neuralnetwork.py:326 INFO:     5 2019-04-05 14:22:47 1.676282e-03 0.069204 0.017301
neuralnetwork.py:326 INFO:     6 2019-04-05 14:22:47 1.496619e-03 0.065315 0.016329
neuralnetwork.py:326 INFO:     7 2019-04-05 14:22:48 1.333145e-03 0.061961 0.015490
neuralnetwork.py:326 INFO:     8 2019-04-05 14:22:48 1.199742e-03 0.061182 0.015296
neuralnetwork.py:326 INFO:     9 2019-04-05 14:22:48 1.169764e-03 0.060314 0.015078
neuralnetwork.py:326 INFO:    10 2019-04-05 14:22:48 1.136802e-03 0.056040 0.014010
neuralnetwork.py:326 INFO:    11 2019-04-05 14:22:48 9.813886e-04 0.048499 0.012125
neuralnetwork.py:326 INFO:    12 2019-04-05 14:22:48 7.350428e-04 0.033953 0.008488
neuralnetwork.py:326 INFO:    13 2019-04-05 14:22:48 3.602567e-04 0.019219 0.004805
neuralnetwork.py:326 INFO:    14 2019-04-05 14:22:48 1.154233e-04 0.016814 0.004203
neuralnetwork.py:326 INFO:    15 2019-04-05 14:22:48 8.834477e-05 0.013615 0.003404
neuralnetwork.py:326 INFO:    16 2019-04-05 14:22:48 5.792981e-05 0.012048 0.003012
neuralnetwork.py:326 INFO:    17 2019-04-05 14:22:49 4.536184e-05 0.009899 0.002475
neuralnetwork.py:326 INFO:    18 2019-04-05 14:22:49 3.062498e-05 0.007230 0.001808
neuralnetwork.py:326 INFO:    19 2019-04-05 14:22:49 1.633580e-05 0.006198 0.001550
neuralnetwork.py:326 INFO:    20 2019-04-05 14:22:49 1.200510e-05 0.005365 0.001341
neuralnetwork.py:326 INFO:    21 2019-04-05 14:22:49 8.994292e-06 0.005125 0.001281
neuralnetwork.py:326 INFO:    22 2019-04-05 14:22:49 8.207249e-06 0.004717 0.001179
neuralnetwork.py:338 INFO:Training finished in 0 hours 0 minutes 5.15 seconds.
neuralnetwork.py:339 INFO:outputs
neuralnetwork.py:340 INFO:[tensor([-14.5874929428, -14.5653991699, -14.5301513672, -14.4866943359,
        -14.4373865128, -14.4011983871, -14.3819179535, -14.3735771179,
        -14.3724117279, -14.3760738373], requires_grad=True)]
neuralnetwork.py:341 INFO:targets
neuralnetwork.py:342 INFO:tensor([[-14.5868730545, -14.5640010834, -14.5292606354, -14.4874134064,
         -14.4443883896, -14.4063940048, -14.3788156509, -14.3651800156,
         -14.3665180206, -14.3813629150]])
potentials.py:52 INFO:
-------------------------------------------------------------------------------
                _______        _______ _     _ _______ _______
                |  |  | |      |       |_____| |______ |  |  |
                |  |  | |_____ |_____  |     | |______ |  |  |



MLChem is Machine Learning for Chemistry. This package is written in Python 3,
and intends to offer modern and rich features to perform machine learning
workflows for chemical physics.

This software is developed by Muammar El Khatib.
-------------------------------------------------------------------------------

potentials.py:53 INFO:Available backends: ['torch', 'torchvision', 'numpy'].
handler.py:34 WARNING:Data structure is not compatible with MLChem
handler.py:56 INFO:Preparing images...
handler.py:87 INFO:Images hashed and processed...
gaussian.py:112 INFO:Fingerprinting
gaussian.py:119 INFO:Getting unique element symbols for training
gaussian.py:125 INFO:Unique elements: ['Cu']
gaussian.py:466 WARNING:Making default symmetry functions
gaussian.py:178 INFO:Preprocessing data...
gaussian.py:222 INFO:Fingerprinting finished in 0 hours 0 minutes 7.75 seconds.
neuralnetwork.py:59 INFO:Model Training
neuralnetwork.py:60 INFO:==============
neuralnetwork.py:61 INFO:Model name: PytorchPotentials.
neuralnetwork.py:62 INFO:Number of hidden-layers: 2
neuralnetwork.py:65 INFO:Structure of Neural Net: (input, 10, 10, output)
neuralnetwork.py:124 INFO:ModuleDict(
  (Cu): Sequential(
    (0): Linear(in_features=8, out_features=10, bias=True)
    (1): ReLU()
    (2): Linear(in_features=10, out_features=10, bias=True)
    (3): ReLU()
    (4): Linear(in_features=10, out_features=1, bias=True)
  )
)
neuralnetwork.py:127 WARNING:Initialization of weights with Xavier Uniform by default.
neuralnetwork.py:228 INFO:Batch size: 10 elements per batch.
neuralnetwork.py:263 INFO:Epoch  Time Stamp          Loss         RMSE/img RMSE/atom
neuralnetwork.py:269 INFO:------ ------------------- ------------ -------- ---------
neuralnetwork.py:323 INFO:     1 2019-04-05 20:38:51 1.891032e-03 0.064883 0.016221
neuralnetwork.py:323 INFO:     2 2019-04-05 20:38:51 1.315561e-03 0.056637 0.014159
neuralnetwork.py:323 INFO:     3 2019-04-05 20:38:52 1.002436e-03 0.044500 0.011125
neuralnetwork.py:323 INFO:     4 2019-04-05 20:38:52 6.188254e-04 0.037989 0.009497
neuralnetwork.py:323 INFO:     5 2019-04-05 20:38:52 4.509829e-04 0.032062 0.008016
neuralnetwork.py:323 INFO:     6 2019-04-05 20:38:52 3.212450e-04 0.027374 0.006843
neuralnetwork.py:323 INFO:     7 2019-04-05 20:38:52 2.341608e-04 0.023791 0.005948
neuralnetwork.py:323 INFO:     8 2019-04-05 20:38:52 1.768820e-04 0.020941 0.005235
neuralnetwork.py:323 INFO:     9 2019-04-05 20:38:52 1.370330e-04 0.018611 0.004653
neuralnetwork.py:323 INFO:    10 2019-04-05 20:38:52 1.082387e-04 0.016675 0.004169
neuralnetwork.py:323 INFO:    11 2019-04-05 20:38:52 8.688720e-05 0.015049 0.003762
neuralnetwork.py:323 INFO:    12 2019-04-05 20:38:52 7.077494e-05 0.013675 0.003419
neuralnetwork.py:323 INFO:    13 2019-04-05 20:38:52 5.844169e-05 0.012534 0.003134
neuralnetwork.py:323 INFO:    14 2019-04-05 20:38:53 4.909664e-05 0.011524 0.002881
neuralnetwork.py:323 INFO:    15 2019-04-05 20:38:53 4.150373e-05 0.010701 0.002675
neuralnetwork.py:323 INFO:    16 2019-04-05 20:38:53 3.578727e-05 0.009989 0.002497
neuralnetwork.py:323 INFO:    17 2019-04-05 20:38:53 3.118278e-05 0.009374 0.002344
neuralnetwork.py:323 INFO:    18 2019-04-05 20:38:53 2.746159e-05 0.008352 0.002088
neuralnetwork.py:323 INFO:    19 2019-04-05 20:38:53 2.180012e-05 0.007586 0.001896
neuralnetwork.py:323 INFO:    20 2019-04-05 20:38:53 1.798254e-05 0.007041 0.001760
neuralnetwork.py:323 INFO:    21 2019-04-05 20:38:53 1.549446e-05 0.006638 0.001659
neuralnetwork.py:323 INFO:    22 2019-04-05 20:38:53 1.376963e-05 0.006479 0.001620
neuralnetwork.py:323 INFO:    23 2019-04-05 20:38:54 1.311758e-05 0.006315 0.001579
neuralnetwork.py:323 INFO:    24 2019-04-05 20:38:54 1.246176e-05 0.006184 0.001546
neuralnetwork.py:323 INFO:    25 2019-04-05 20:38:54 1.194887e-05 0.006046 0.001512
neuralnetwork.py:323 INFO:    26 2019-04-05 20:38:54 1.142418e-05 0.005948 0.001487
neuralnetwork.py:323 INFO:    27 2019-04-05 20:38:54 1.105679e-05 0.005847 0.001462
neuralnetwork.py:323 INFO:    28 2019-04-05 20:38:54 1.068309e-05 0.005679 0.001420
neuralnetwork.py:323 INFO:    29 2019-04-05 20:38:54 1.007730e-05 0.005527 0.001382
neuralnetwork.py:323 INFO:    30 2019-04-05 20:38:54 9.547813e-06 0.005373 0.001343
neuralnetwork.py:323 INFO:    31 2019-04-05 20:38:54 9.021712e-06 0.005017 0.001254
neuralnetwork.py:323 INFO:    32 2019-04-05 20:38:55 7.865529e-06 0.004873 0.001218
neuralnetwork.py:335 INFO:Training finished in 0 hours 0 minutes 6.60 seconds.
neuralnetwork.py:336 INFO:outputs
neuralnetwork.py:337 INFO:[tensor([-14.5829858780, -14.5599184036, -14.5354003906, -14.4956007004,
        -14.4487380981, -14.4096755981, -14.3755645752, -14.3631267548,
        -14.3617916107, -14.3755168915], requires_grad=True)]
neuralnetwork.py:338 INFO:targets
neuralnetwork.py:339 INFO:tensor([[-14.5868730545, -14.5640010834, -14.5292606354, -14.4874134064,
         -14.4443883896, -14.4063940048, -14.3788156509, -14.3651800156,
         -14.3665180206, -14.3813629150]])
